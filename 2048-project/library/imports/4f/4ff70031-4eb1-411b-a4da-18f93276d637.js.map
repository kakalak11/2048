{"version":3,"sources":["../../../../assets/script/assets/script/keyboardScript.js"],"names":["Emitter","require","cc","Class","extends","Component","properties","_canMove","_onKeyDown","event","instance","emit","node","keyCode","macro","KEY","a","d","w","s","_reset","log","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onLoad","value","touch","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAU;AADF,KAHP;;AAOL;;AAEAC,gBAAY,oBAAUC,KAAV,EAAiB;AACzBT,gBAAQU,QAAR,CAAiBC,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA,aAAKC,IAAL,CAAUD,IAAV,CAAe,UAAf,EAA2B,KAA3B;AACA,YAAI,CAAC,KAAKJ,QAAV,EAAoB;AACpB,aAAKA,QAAL,GAAgB,KAAhB;AACA,gBAAQE,MAAMI,OAAd;AACI,iBAAKX,GAAGY,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,qBAAKJ,IAAL,CAAUD,IAAV,CAAe,SAAf,EAA0B,KAA1B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaE,CAAlB;AACI,qBAAKL,IAAL,CAAUD,IAAV,CAAe,SAAf,EAA0B,IAA1B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,qBAAKN,IAAL,CAAUD,IAAV,CAAe,aAAf,EAA8B,KAA9B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaI,CAAlB;AACI,qBAAKP,IAAL,CAAUD,IAAV,CAAe,aAAf,EAA8B,IAA9B;AACA;AACJ;AACI,qBAAKJ,QAAL,GAAgB,IAAhB;AACA;;AAfR;AAkBH,KAhCI;;AAkCLa,UAlCK,oBAkCI;AACLlB,WAAGmB,GAAH,CAAO,gBAAP;AACAnB,WAAGoB,WAAH,CAAeC,EAAf,CAAkBrB,GAAGsB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKlB,UAA1D,EAAsE,IAAtE;AACH,KArCI;AAuCLmB,UAvCK,oBAuCI;AAAA;;AACL,aAAKf,IAAL,CAAUW,EAAV,CAAa,SAAb,EAAwB,YAAkB;AAAA,gBAAjBK,KAAiB,uEAAT,IAAS;;AACtC,kBAAKrB,QAAL,GAAgBqB,KAAhB;AACH,SAFD,EAEG,IAFH;AAGA,aAAKhB,IAAL,CAAUW,EAAV,CAAa,OAAb,EAAsB,KAAKH,MAA3B,EAAmC,IAAnC;AACA,aAAKR,IAAL,CAAUW,EAAV,CAAa,UAAb,EAAyB,UAACM,KAAD,EAAW;AAChC,gBAAIA,KAAJ,EAAW,MAAKtB,QAAL,GAAgB,KAAhB;AAEd,SAHD,EAGG,IAHH;AAIAL,WAAGoB,WAAH,CAAeC,EAAf,CAAkBrB,GAAGsB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKlB,UAA1D,EAAsE,IAAtE;AACH,KAjDI;AAmDLsB,SAnDK,mBAmDG,CAEP;AArDI;;AAuDL;AAvDJ;;AA0DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"keyboardScript.js","sourceRoot":"../../../../assets/script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst Emitter = require('mEmitter');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _canMove: true,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    _onKeyDown: function (event) {\n        Emitter.instance.emit('sound', 'swipe');\n        this.node.emit('setInput', false);\n        if (!this._canMove) return;\n        this._canMove = false;\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.node.emit('moveRow', false);\n                break;\n            case cc.macro.KEY.d:\n                this.node.emit('moveRow', true);\n                break;\n            case cc.macro.KEY.w:\n                this.node.emit('moveCollumn', false);\n                break;\n            case cc.macro.KEY.s:\n                this.node.emit('moveCollumn', true);\n                break;\n            default:\n                this._canMove = true;\n                break;\n\n        }\n    },\n\n    _reset() {\n        cc.log('keyboard reset');\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);\n    },\n\n    onLoad() {\n        this.node.on('canMove', (value = true) => {\n            this._canMove = value;\n        }, this);\n        this.node.on('reset', this._reset, this);\n        this.node.on('setInput', (touch) => {\n            if (touch) this._canMove = false;\n\n        }, this)\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n});\n\n// var Move = cc.Class({\n//     ctor: function (direction) {\n//         this.direction = direction;\n//         this._direction = null;\n//     },\n\n//     excute: function () {\n//         this.node.emit('move', this.direction);\n//         this._direction = this.direction;\n//     },\n\n//     undo: function () {\n//         this.node.emit('undo', this._direction);\n//     },\n// })\n"]}