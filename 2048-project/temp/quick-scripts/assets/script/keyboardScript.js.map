{"version":3,"sources":["keyboardScript.js"],"names":["Emitter","require","cc","Class","extends","Component","properties","_canMove","_onKeyDown","event","instance","emit","node","keyCode","macro","KEY","a","d","w","s","_reset","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onLoad","registerEvent","value","touch","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAU;AADF,KAHP;;AAOL;;AAEAC,gBAAY,oBAAUC,KAAV,EAAiB;AACzB;AACAT,gBAAQU,QAAR,CAAiBC,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA,aAAKC,IAAL,CAAUD,IAAV,CAAe,UAAf,EAA2B,KAA3B;AACA,YAAI,CAAC,KAAKJ,QAAV,EAAoB;AACpBP,gBAAQU,QAAR,CAAiBC,IAAjB,CAAsB,SAAtB,EAAiC,KAAjC;AACA,gBAAQF,MAAMI,OAAd;AACI,iBAAKX,GAAGY,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,qBAAKJ,IAAL,CAAUD,IAAV,CAAe,SAAf,EAA0B,KAA1B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaE,CAAlB;AACI,qBAAKL,IAAL,CAAUD,IAAV,CAAe,SAAf,EAA0B,IAA1B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,qBAAKN,IAAL,CAAUD,IAAV,CAAe,aAAf,EAA8B,KAA9B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaI,CAAlB;AACI,qBAAKP,IAAL,CAAUD,IAAV,CAAe,aAAf,EAA8B,IAA9B;AACA;AACJ;AACIX,wBAAQU,QAAR,CAAiBC,IAAjB,CAAsB,SAAtB;AACA;AAfR;AAiBH,KAhCI;;AAkCL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEAS,UA1EK,oBA0EI;AACLlB,WAAGmB,WAAH,CAAeC,EAAf,CAAkBpB,GAAGqB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKjB,UAA1D,EAAsE,IAAtE;AACH,KA5EI;AA8ELkB,UA9EK,oBA8EI;AAAA;;AACL1B,gBAAQU,QAAR,CAAiBiB,aAAjB,CAA+B,SAA/B,EAA0C;AAAA,gBAACC,KAAD,uEAAS,IAAT;AAAA,mBAAkB,MAAKrB,QAAL,GAAgBqB,KAAlC;AAAA,SAA1C;AACA,aAAKhB,IAAL,CAAUU,EAAV,CAAa,OAAb,EAAsB,KAAKF,MAA3B,EAAmC,IAAnC;AACA,aAAKR,IAAL,CAAUU,EAAV,CAAa,UAAb,EAAyB,UAACO,KAAD,EAAW;AAChC,gBAAIA,KAAJ,EAAW,MAAKtB,QAAL,GAAgB,KAAhB;AACd,SAFD,EAEG,IAFH;AAGAP,gBAAQU,QAAR,CAAiBiB,aAAjB,CAA+B,OAA/B,EAAwC;AAAA,mBAAMzB,GAAGmB,WAAH,CAAeC,EAAf,CAAkBpB,GAAGqB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,MAAKjB,UAA1D,QAAN;AAAA,SAAxC;AACH,KArFI;AAuFLsB,SAvFK,mBAuFG,CAEP;AAzFI;;AA2FL;AA3FJ","file":"keyboardScript.js","sourceRoot":"../../../../assets/script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst Emitter = require('mEmitter');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _canMove: true,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    _onKeyDown: function (event) {\n        // cc.warn('key down', this._canMove);\n        Emitter.instance.emit('sound', 'swipe');\n        this.node.emit('setInput', false);\n        if (!this._canMove) return;\n        Emitter.instance.emit('canMove', false);\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.node.emit('moveRow', false);\n                break;\n            case cc.macro.KEY.d:\n                this.node.emit('moveRow', true);\n                break;\n            case cc.macro.KEY.w:\n                this.node.emit('moveCollumn', false);\n                break;\n            case cc.macro.KEY.s:\n                this.node.emit('moveCollumn', true);\n                break;\n            default:\n                Emitter.instance.emit('canMove');\n                break;\n        }\n    },\n\n    // moveLeft() { return this.node.emit('moveRow', false) },\n    // moveRight() { return this.node.emit('moveRow', true) },\n    // moveUp() { return this.node.emit('moveCollumn', false) },\n    // moveDown() { return this.node.emit('moveCollumn', true) },\n\n    // MoveRightCommand: function () { return },\n    // MoveLeftCommand: function () { return },\n    // MoveUpCommand: function () { return },\n    // MoveDownCommand: function () { return },\n\n    // Command: function (execute, undo) {\n    //     this.execute = execute;\n    //     this.undo = undo;\n    // },\n\n    // Action: function () {\n    //     this.current = null;\n    //     this.commands = [];\n\n    //     return {\n    //         _action(command) {\n    //             var name = command.execute.toString().substr(9, 3);\n    //             return name.charAt(0).toUpperCase() + name.slice(1);\n    //         },\n\n    //         execute(command) {\n    //             this.current = command.execute(this.current);\n    //             this.commands.push(command);\n    //         },\n\n    //         undo() {\n    //             var command = commands.pop();\n    //             this.current = command.undo(this.current);\n    //         },\n\n    //     }\n\n\n    // },\n\n    _reset() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);\n    },\n\n    onLoad() {\n        Emitter.instance.registerEvent('canMove', (value = true) => this._canMove = value);\n        this.node.on('reset', this._reset, this);\n        this.node.on('setInput', (touch) => {\n            if (touch) this._canMove = false;\n        }, this)\n        Emitter.instance.registerEvent('start', () => cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this));\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n});"]}