{"version":3,"sources":["keyboardScript.js"],"names":["Emitter","require","cc","Class","extends","Component","properties","_canMove","_onKeyDown","event","node","emit","instance","keyCode","macro","KEY","a","d","w","s","_reset","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onLoad","registerEvent","value","touch","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAU;AADF,KAHP;;AAOL;;AAEAC,gBAAY,oBAAUC,KAAV,EAAiB;AACzB;AACA,aAAKC,IAAL,CAAUC,IAAV,CAAe,UAAf,EAA2B,KAA3B;AACA,YAAI,CAAC,KAAKJ,QAAV,EAAoB;AACpBP,gBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,SAAtB,EAAiC,KAAjC;AACA,gBAAQF,MAAMI,OAAd;AACI,iBAAKX,GAAGY,KAAH,CAASC,GAAT,CAAaC,CAAlB;AACI,qBAAKN,IAAL,CAAUC,IAAV,CAAe,SAAf,EAA0B,KAA1B;AACAX,wBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaE,CAAlB;AACI,qBAAKP,IAAL,CAAUC,IAAV,CAAe,SAAf,EAA0B,IAA1B;AACAX,wBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaG,CAAlB;AACI,qBAAKR,IAAL,CAAUC,IAAV,CAAe,aAAf,EAA8B,KAA9B;AACAX,wBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA;AACJ,iBAAKT,GAAGY,KAAH,CAASC,GAAT,CAAaI,CAAlB;AACI,qBAAKT,IAAL,CAAUC,IAAV,CAAe,aAAf,EAA8B,IAA9B;AACAX,wBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B;AACA;AACJ;AACIX,wBAAQY,QAAR,CAAiBD,IAAjB,CAAsB,SAAtB;AACA;AAnBR;AAqBH,KAnCI;;AAqCLS,UArCK,oBAqCI;AACLlB,WAAGmB,WAAH,CAAeC,EAAf,CAAkBpB,GAAGqB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,KAAKjB,UAA1D,EAAsE,IAAtE;AACH,KAvCI;AAyCLkB,UAzCK,oBAyCI;AAAA;;AACL1B,gBAAQY,QAAR,CAAiBe,aAAjB,CAA+B,SAA/B,EAA0C;AAAA,gBAACC,KAAD,uEAAS,IAAT;AAAA,mBAAkB,MAAKrB,QAAL,GAAgBqB,KAAlC;AAAA,SAA1C;AACA,aAAKlB,IAAL,CAAUY,EAAV,CAAa,OAAb,EAAsB,KAAKF,MAA3B,EAAmC,IAAnC;AACA,aAAKV,IAAL,CAAUY,EAAV,CAAa,UAAb,EAAyB,UAACO,KAAD,EAAW;AAChC,gBAAIA,KAAJ,EAAW,MAAKtB,QAAL,GAAgB,KAAhB;AACd,SAFD,EAEG,IAFH;AAGAP,gBAAQY,QAAR,CAAiBe,aAAjB,CAA+B,OAA/B,EAAwC;AAAA,mBAAMzB,GAAGmB,WAAH,CAAeC,EAAf,CAAkBpB,GAAGqB,WAAH,CAAeC,SAAf,CAAyBC,QAA3C,EAAqD,MAAKjB,UAA1D,QAAN;AAAA,SAAxC;AACH,KAhDI;AAkDLsB,SAlDK,mBAkDG,CAEP;AApDI;;AAsDL;AAtDJ","file":"keyboardScript.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst Emitter = require('mEmitter');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _canMove: true,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    _onKeyDown: function (event) {\r\n        // cc.warn('key down', this._canMove);\r\n        this.node.emit('setInput', false);\r\n        if (!this._canMove) return;\r\n        Emitter.instance.emit('canMove', false);\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.node.emit('moveRow', false);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.node.emit('moveRow', true);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.w:\r\n                this.node.emit('moveCollumn', false);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.s:\r\n                this.node.emit('moveCollumn', true);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            default:\r\n                Emitter.instance.emit('canMove');\r\n                break;\r\n        }\r\n    },\r\n\r\n    _reset() {\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);\r\n    },\r\n\r\n    onLoad() {\r\n        Emitter.instance.registerEvent('canMove', (value = true) => this._canMove = value);\r\n        this.node.on('reset', this._reset, this);\r\n        this.node.on('setInput', (touch) => {\r\n            if (touch) this._canMove = false;\r\n        }, this)\r\n        Emitter.instance.registerEvent('start', () => cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this));\r\n    },\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});"]}