{"version":3,"sources":["GameManagerv1.ts"],"names":[],"mappings":";;;;;AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAE9B,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IAAsC,4BAAY;IADlD;QAAA,qEAsBC;QAlBE,WAAK,GAAa,IAAI,CAAC;QAGvB,qBAAe,GAAa,IAAI,CAAC;QAGjC,eAAS,GAAY,IAAI,CAAC;QAG1B,iBAAW,GAAY,IAAI,CAAC;QAG5B,cAAQ,GAAY,IAAI,CAAC;QAGzB,gBAAU,GAAa,IAAI,CAAC;QAE5B,cAAQ,GAAY,IAAI,CAAC;;IAC5B,CAAC;IAlBE;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;2CACI;IAGvB;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;qDACc;IAGjC;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;+CACQ;IAG1B;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;iDACU;IAG5B;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;8CACO;IAGzB;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;gDACS;IAlBV,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAqB5B;IAAD,eAAC;CArBD,AAqBC,CArBqC,EAAE,CAAC,SAAS,GAqBjD;kBArBoB,QAAQ;AAwB7B,aAAa;AACb,6BAA6B;AAE7B,oBAAoB;AACpB,0BAA0B;AAC1B,qCAAqC;AACrC,8BAA8B;AAC9B,gCAAgC;AAChC,6BAA6B;AAC7B,8BAA8B;AAC9B,gCAAgC;AAChC,2BAA2B;AAC3B,SAAS;AAET,+BAA+B;AAE/B,uCAAuC;AACvC,+CAA+C;AAC/C,gCAAgC;AAChC,8CAA8C;AAC9C,YAAY;AACZ,4CAA4C;AAC5C,4CAA4C;AAC5C,SAAS;AAET,uCAAuC;AACvC,+CAA+C;AAC/C,mDAAmD;AACnD,SAAS;AAET,sCAAsC;AACtC,0FAA0F;AAC1F,kCAAkC;AAClC,8DAA8D;AAC9D,sBAAsB;AACtB,YAAY;AACZ,gCAAgC;AAChC,8GAA8G;AAC9G,yEAAyE;AACzE,oDAAoD;AACpD,kBAAkB;AAClB,SAAS;AAET,0BAA0B;AAC1B,0CAA0C;AAC1C,qDAAqD;AACrD,+CAA+C;AAC/C,SAAS;AAET,2BAA2B;AAC3B,4CAA4C;AAC5C,qDAAqD;AACrD,+CAA+C;AAC/C,SAAS;AAET,2CAA2C;AAC3C,6DAA6D;AAC7D,kEAAkE;AAClE,0CAA0C;AAC1C,4CAA4C;AAC5C,4CAA4C;AAC5C,kBAAkB;AAClB,SAAS;AAET,sBAAsB;AACtB,yCAAyC;AACzC,kDAAkD;AAClD,SAAS;AAET,2BAA2B;AAC3B,0FAA0F;AAC1F,SAAS;AAET,2BAA2B;AAC3B,6FAA6F;AAC7F,SAAS;AAET,iBAAiB;AACjB,uFAAuF;AACvF,yEAAyE;AACzE,uEAAuE;AAEvE,uFAAuF;AACvF,iDAAiD;AACjD,2EAA2E;AAE3E,+EAA+E;AAC/E,+EAA+E;AAC/E,iFAAiF;AACjF,qFAAqF;AAErF,0CAA0C;AAC1C,SAAS;AAET,gBAAgB;AAEhB,SAAS;AAET,yBAAyB;AACzB,MAAM","file":"","sourceRoot":"../../../../../assets/scripts/core","sourcesContent":["const Emitter = require('mEmitter');\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n   @property(cc.Label)\n   score: cc.Label = null;\n\n   @property(cc.Label)\n   bestScoreNumber: cc.Label = null;\n\n   @property(cc.Node)\n   gameTable: cc.Node = null;\n\n   @property(cc.Node)\n   leaderBoard: cc.Node = null;\n\n   @property(cc.Node)\n   winBoard: cc.Node = null;\n\n   @property(cc.Label)\n   turnNumber: cc.Label = null;\n\n   _playing: boolean = null;\n}\n\n\n// cc.Class({\n//     extends: cc.Component,\n\n//     properties: {\n//         score: cc.Node,\n//         bestScoreNumber: cc.Label,\n//         gameBoard: cc.Node,\n//         leaderBoard: cc.Node,\n//         winBoard: cc.Node,\n//         loseBoard: cc.Node,\n//         turnNumber: cc.Label,\n//         _playing: false,\n//     },\n\n//     // LIFE-CYCLE CALLBACKS:\n\n//     onClickPlayButton: function () {\n//         Emitter.instance.emit('showWindow');\n//         if (!this._playing) {\n//             Emitter.instance.emit('start');\n//         }\n//         Emitter.instance.emit('canMove');\n//         Emitter.instance.emit('playing');\n//     },\n\n//     onClickMenuButton: function () {\n//         Emitter.instance.emit('hideWindow');\n//         Emitter.instance.emit('canMove', false);\n//     },\n\n//     _scoreUpdate: function (data) {\n//         this.gameMatrix = this.gameBoard.getComponent('gameBoard')._tilesMatrix.flat();\n//         if (!this.gameMatrix) {\n//             this.score.getComponent('cc.Label').string = 0;\n//             return;\n//         }\n//         this.scoreNumber = 0;\n//         this.gameMatrix.forEach(element => this.scoreNumber += element.getComponent('tilesScript').number);\n//         this.score.getComponent('cc.Label').string = this.scoreNumber;\n//         this.turnNumber.string = `Turn: ${data}`;\n//         return;\n//     },\n\n//     _win: function () {\n//         this.winBoard.emit('winBoard');\n//         Emitter.instance.emit('sound', 'gameWin');\n//         Emitter.instance.emit('notPlaying');\n//     },\n\n//     _lose: function () {\n//         this.loseBoard.emit('loseBoard');\n//         Emitter.instance.emit('sound', 'gameOver')\n//         Emitter.instance.emit('notPlaying');\n//     },\n\n//     onClickContinueButton: function () {\n//         this.gameBoard.getComponent('gameBoard')._reset();\n//         if (this._playing) Emitter.instance.emit('notPlaying');\n//         Emitter.instance.emit('start');\n//         Emitter.instance.emit('canMove');\n//         Emitter.instance.emit('playing');\n//         return;\n//     },\n\n//     onClickUndo() {\n//         Emitter.instance.emit('undo');\n//         Emitter.instance.emit('sound', 'undo');\n//     },\n\n//     _show: function () {\n//         this.node.runAction(cc.moveTo(0.5, 0, 0).easing(cc.easeExponentialInOut(0.5)));\n//     },\n\n//     _hide: function () {\n//         this.node.runAction(cc.moveTo(0.5, -500, 0).easing(cc.easeExponentialInOut(0.5)));\n//     },\n\n//     onLoad() {\n//         Emitter.instance.registerEvent('updateScore', this._scoreUpdate.bind(this));\n//         Emitter.instance.registerEvent('lose', this._lose.bind(this));\n//         Emitter.instance.registerEvent('win', this._win.bind(this));\n\n//         this.leaderBoardScript = this.leaderBoard.getComponent('leaderBoardScript');\n//         this.leaderBoardScript.active = false;\n//         this.bestScoreNumber.string = this.leaderBoardScript._bestScore;\n\n//         Emitter.instance.registerEvent('showWindow', this._show.bind(this));\n//         Emitter.instance.registerEvent('hideWindow', this._hide.bind(this));\n//         Emitter.instance.registerEvent('playing', () => this._playing = true);\n//         Emitter.instance.registerEvent('notPlaying', () => this._playing = false);\n\n//         console.warn(cc.sys.isBrowser);\n//     },\n\n//     start() {\n\n//     },\n\n//     // update (dt) {},\n// });\n\n"]}